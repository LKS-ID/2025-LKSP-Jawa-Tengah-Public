from flask import Flask, request, jsonify, session, render_template, redirect, url_for, abort
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash
import datetime
import os

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'
app.config['SECRET_KEY'] = '882cbc18617677a181a4efa639809ba0'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=True)
    password = db.Column(db.String(120), nullable=False)
    role = db.Column(db.String(20), default='standard')

    def to_dict(self):
        return {
            'id': self.id,
            'username': self.username,
            'email': self.email,
            'role': self.role
        }

class Note(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    title = db.Column(db.String(100), nullable=False)
    content = db.Column(db.Text, nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.datetime.utcnow)
    
    def to_dict(self):
        return {
            'id': self.id,
            'title': self.title,
            'content': self.content,
            'created_at': self.created_at.strftime('%Y-%m-%d %H:%M:%S')
        }

# Initialize database
with app.app_context():
    db.create_all()
    # Create an admin user for demonstration if it doesn't exist
    admin = User.query.filter_by(username='admin').first()
    if not admin:
        admin = User(
            username='admin',
            email='admin@example.com',
            password=generate_password_hash('4adf112d894809cbed1ddb8a2936017c'),
            role='admin'
        )
        db.session.add(admin)
        db.session.commit()

# Helper function to check if user is admin
def is_admin():
    if 'user_id' not in session:
        return False
    
    user = User.query.get(session['user_id'])
    return user and user.role == 'admin'

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'GET':
        return render_template('auth/register.html')
    else:
        username = request.form.get('username')
        email = request.form.get('email')
        password = request.form.get('password')
        
        # Check if user exists
        if User.query.filter_by(username=username).first():
            return jsonify({'error': 'Username already exists'}), 400
            
        if User.query.filter_by(email=email).first():
            return jsonify({'error': 'Email already exists'}), 400
        
        hashed_password = generate_password_hash(password)
        
        # VULNERABLE PART: Mass assignment vulnerability
        # Directly creating user with all parameters from request
        new_user = User(
            username=username,
            email=email,
            password=hashed_password
        )
        
        db.session.add(new_user)
        db.session.commit()
        
        return redirect('/login')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'GET':
        return render_template('auth/login.html')
    else:
        username = request.form.get('username')
        password = request.form.get('password')
        
        user = User.query.filter_by(username=username).first()
        
        if not user or not check_password_hash(user.password, password):
            return jsonify({'error': 'Invalid credentials'}), 401
        
        session['user_id'] = user.id
        session['username'] = user.username
        session['role'] = user.role
        
        return redirect('/')

@app.route('/logout')
def logout():
    session.clear()
    return redirect('/login')

@app.route('/profile', methods=['GET', 'POST'])
def profile():
    if 'user_id' not in session:
        return redirect('/login')
    
    user_id = session['user_id']
    user = User.query.get(user_id)
    
    if not user:
        return redirect('/logout')
    
    if request.method == 'GET':
        return render_template('profile.html', user=user)
    else:
        email = request.form.get('email')
        
        # VULNERABLE PART: Mass assignment vulnerability
        # We're only showing email field in the UI, but the backend accepts all parameters
        # An attacker could send a POST request with role=admin parameter
        for key, value in request.form.items():
            if hasattr(user, key):
                setattr(user, key, value)
        
        # Update the session role if it was changed
        if user.role != session.get('role'):
            session['role'] = user.role
        
        db.session.commit()
        return redirect('/profile')

@app.route('/notes')
def notes():
    if 'user_id' not in session:
        return redirect('/login')
    
    user_id = session['user_id']
    notes = Note.query.filter_by(user_id=user_id).all()
    
    return render_template('notes/list.html', notes=notes)

@app.route('/notes/new', methods=['GET', 'POST'])
def new_note():
    if 'user_id' not in session:
        return redirect('/login')
    
    if request.method == 'GET':
        return render_template('notes/create.html')
    else:
        title = request.form.get('title')
        content = request.form.get('content')
        
        if not title or not content:
            return jsonify({'error': 'Title and content are required'}), 400
        
        new_note = Note(
            user_id=session['user_id'],
            title=title,
            content=content
        )
        
        db.session.add(new_note)
        db.session.commit()
        
        return redirect('/notes')

@app.route('/calculator')
def calculator():
    if 'user_id' not in session:
        return redirect('/login')
    
    return render_template('calculator.html')

@app.route('/api/calculate', methods=['POST'])
def api_calculate():
    data = request.json
    num1 = data.get('num1', 0)
    num2 = data.get('num2', 0)
    operation = data.get('operation', 'add')
    
    try:
        num1 = float(num1)
        num2 = float(num2)
        
        if operation == 'add':
            result = num1 + num2
        elif operation == 'subtract':
            result = num1 - num2
        elif operation == 'multiply':
            result = num1 * num2
        elif operation == 'divide':
            if num2 == 0:
                return jsonify({'error': 'Cannot divide by zero'}), 400
            result = num1 / num2
        else:
            return jsonify({'error': 'Invalid operation'}), 400
            
        return jsonify({'result': result}), 200
    except ValueError:
        return jsonify({'error': 'Invalid numbers provided'}), 400

@app.route('/')
def home():
    if 'user_id' not in session:
        return redirect('/login')
    
    # Check if user is admin to show admin panel option
    admin_access = is_admin()
    
    return render_template('home.html', admin_access=admin_access)

# New admin routes
@app.route('/admin')
def admin_panel():
    if not is_admin():
        abort(403)  # Forbidden
    
    return render_template('admin/panel.html')

@app.route('/admin/flag')
def admin_flag():
    if not is_admin():
        abort(403)  # Forbidden
    
    flag_content = "Flag not found"
    try:
        with open('/flag', 'r') as f:
            flag_content = f.read().strip()
    except FileNotFoundError:
        flag_content = "FLAG{mass_assignment_vulnerability_exploited}"
    except Exception as e:
        flag_content = f"Error reading flag: {str(e)}"
    
    return render_template('admin/flag.html', flag_content=flag_content)



if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=False)
